{"mappings":"ACEA,IAAM,EAAS,SAAS,sBAAsB,CAAC,SAmB1C,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,SAAS,aAAa,CAAC,SAE/B,EAAQ,EAAM,aAAa,CAAC,SAE9B,EAAgB,EAAM,YAAY,CAAC,QAEnC,IAAkB,EAAc,WAAW,IAC7C,CAAA,EAAgB,AAzBI,SAAC,CAAzB,EAIE,IAAK,IAHC,EAAS,CAAC,EAAE,CACZ,EAAS,EAAE,CAER,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAClC,CAAW,CAAC,EAAE,GAAK,CAAW,CAAC,EAAE,CAAC,WAAW,IAC/C,EAAO,IAAI,CAAC,GAIhB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IACjC,EAAO,IAAI,CAAC,EAAY,KAAK,CAAC,CAAM,CAAC,EAAE,CAAE,CAAM,CAAC,EAAI,EAAE,GAGxD,OAAO,EAAO,IAAI,CAAC,IACrB,EAUoC,EADlC,EAGA,EAAM,WAAW,CAAG,EAAc,WAAW,GAC7C,EAAM,YAAY,CAAC,MAAO,EAAM,EAAE,EAClC,EAAM,SAAS,CAAC,GAAG,CAAC,eAEpB,EAAM,YAAY,CAChB,cACA,GAA6C,MAAA,CAA1C,EAAc,KAAK,CAAC,EAAG,GAAG,WAAW,IAA4B,MAAA,CAAvB,EAAc,KAAK,CAAC,KAGnE,EAAM,YAAY,CAAC,EAAO,EAC5B,C,C,M,E,CApBK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar fields = document.getElementsByClassName(\"field\");\nvar stringHumanizer = function(inputString) {\n    var sizing = [\n        0\n    ];\n    var result = [];\n    for(var i = 1; i < inputString.length; i++)if (inputString[i] === inputString[i].toUpperCase()) sizing.push(i);\n    for(var i1 = 0; i1 < sizing.length; i1++)result.push(inputString.slice(sizing[i1], sizing[i1 + 1]));\n    return result.join(\" \");\n};\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var field = _step.value;\n        var label = document.createElement(\"label\");\n        var input = field.querySelector(\"input\");\n        var attributeName = input.getAttribute(\"name\");\n        if (attributeName !== attributeName.toLowerCase()) attributeName = stringHumanizer(attributeName);\n        label.textContent = attributeName.toUpperCase();\n        label.setAttribute(\"for\", input.id);\n        label.classList.add(\"field-label\");\n        input.setAttribute(\"placeholder\", \"\".concat(attributeName.slice(0, 1).toUpperCase()).concat(attributeName.slice(1)));\n        field.insertBefore(label, input);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\n\n//# sourceMappingURL=index.2f7475a2.js.map\n","'use strict';\n\nconst fields = document.getElementsByClassName('field');\n\nconst stringHumanizer = (inputString) => {\n  const sizing = [0];\n  const result = [];\n\n  for (let i = 1; i < inputString.length; i++) {\n    if (inputString[i] === inputString[i].toUpperCase()) {\n      sizing.push(i);\n    }\n  }\n\n  for (let i = 0; i < sizing.length; i++) {\n    result.push(inputString.slice(sizing[i], sizing[i + 1]));\n  }\n\n  return result.join(' ');\n};\n\nfor (const field of fields) {\n  const label = document.createElement('label');\n\n  const input = field.querySelector('input');\n\n  let attributeName = input.getAttribute('name');\n\n  if (attributeName !== attributeName.toLowerCase()) {\n    attributeName = stringHumanizer(attributeName);\n  }\n  label.textContent = attributeName.toUpperCase();\n  label.setAttribute('for', input.id);\n  label.classList.add('field-label');\n\n  input.setAttribute(\n    'placeholder',\n    `${attributeName.slice(0, 1).toUpperCase()}${attributeName.slice(1)}`,\n  );\n\n  field.insertBefore(label, input);\n}\n"],"names":["fields","document","getElementsByClassName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","field","value","label","createElement","input","querySelector","attributeName","getAttribute","toLowerCase","stringHumanizer","inputString","sizing","result","i","length","toUpperCase","push","i1","slice","join","textContent","setAttribute","id","classList","add","concat","insertBefore","err","return"],"version":3,"file":"index.2f7475a2.js.map"}